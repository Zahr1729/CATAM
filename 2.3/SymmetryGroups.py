import matplotlib.pyplot as plt
import numpy
import TriangleInversion as ti

# Principle behind this program is to, given p.
# Generate PSL(2,p) and find all the elements
# Generate one composition of generators for each element.
# Store Matrix elements as 4-tuples

def GetGroupData357(p):
    match p:
        case 3:
            order = 12
            group = [(1, 0, 0, 1), (0, 1, 2, 0), (0, 2, 1, 2), (1, 1, 0, 1), (1, 0, 1, 1), (2, 1, 2, 0), (1, 2, 0, 1), (1, 1, 1, 2), (0, 1, 2, 2), (1, 1, 2, 0), (2, 1, 1, 1), (2, 0, 1, 2)]
            paths = [[], [1], [2], [3], [1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [1, 2, 1], [1, 2, 3], [1, 3, 1]]
        case 5:
            order = 60
            group = [(1, 0, 0, 1), (0, 1, 4, 0), (0, 4, 1, 4), (1, 1, 0, 1), (1, 0, 1, 1), (4, 1, 4, 0), (1, 4, 0, 1), (1, 3, 1, 4), (0, 1, 4, 4), (1, 2, 0, 1), (1, 1, 4, 0), (2, 1, 1, 1), (4, 0, 1, 4), (3, 1, 4, 0), (0, 4, 1, 3), (1, 4, 4, 2), (2, 2, 1, 4), (1, 1, 1, 2), (0, 1, 4, 3), (1, 3, 0, 1), (1, 0, 2, 1), (1, 1, 3, 4), (3, 2, 1, 1), (4, 1, 3, 1), (4, 0, 2, 4), (2, 1, 4, 0), (1, 2, 1, 3), (1, 3, 2, 2), (1, 4, 3, 3), (3, 1, 1, 4), (1, 2, 4, 4), (2, 3, 1, 2), (3, 1, 2, 1), (2, 1, 3, 2), (1, 1, 2, 3), (2, 2, 3, 1), (1, 3, 4, 3), (2, 0, 1, 3), (2, 2, 4, 2), (3, 0, 2, 2), (1, 2, 3, 2), (3, 0, 1, 2), (2, 1, 2, 4), (0, 2, 2, 1), (3, 2, 3, 4), (0, 3, 3, 2), (3, 1, 3, 3), (0, 3, 3, 1), (1, 2, 2, 0), (1, 3, 3, 0), (2, 2, 2, 0), (0, 2, 2, 2), (2, 3, 3, 0), (3, 1, 0, 2), (2, 1, 0, 3), (3, 2, 0, 2), (3, 0, 3, 2), (2, 2, 0, 3), (3, 0, 0, 2), (0, 3, 3, 0)]
            paths = [[], [1], [2], [3], [1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 3], [1, 2, 1], [1, 2, 3], [1, 3, 1], [1, 3, 3], [2, 1, 2], [2, 3, 1], [2, 3, 3], [3, 1, 2], [3, 3, 1], [3, 3, 3], [1, 2, 1, 2], [1, 2, 3, 1], [1, 2, 3, 3], [1, 3, 1, 2], [1, 3, 3, 1], [1, 3, 3, 3], [2, 1, 2, 3], [2, 3, 1, 2], [2, 3, 3, 1], [2, 3, 3, 3], [3, 1, 2, 1], [3, 1, 2, 3], [1, 2, 1, 2, 3], [1, 2, 3, 1, 2], [1, 2, 3, 3, 1], [1, 3, 1, 2, 3], [2, 1, 2, 3, 1], [2, 1, 2, 3, 3], [2, 3, 1, 2, 1], [2, 3, 1, 2, 3], [3, 1, 2, 3, 1], [3, 1, 2, 3, 3], [1, 2, 1, 2, 3, 1], [1, 2, 1, 2, 3, 3], [1, 2, 3, 1, 2, 1], [1, 2, 3, 1, 2, 3], [1, 3, 1, 2, 3, 1], [1, 3, 1, 2, 3, 3], [2, 1, 2, 3, 1, 2], [2, 1, 2, 3, 3, 1], [2, 3, 1, 2, 3, 1], [2, 3, 1, 2, 3, 3], [3, 1, 2, 3, 1, 2], [1, 2, 1, 2, 3, 1, 2], [1, 2, 1, 2, 3, 3, 1], [1, 2, 3, 1, 2, 3, 1], [1, 2, 3, 1, 2, 3, 3], [1, 3, 1, 2, 3, 1, 2], [2, 3, 1, 2, 3, 1, 2], [3, 1, 2, 3, 1, 2, 3]]
        case 7:
            order = 168
            group = [(1, 0, 0, 1), (0, 1, 6, 0), (0, 6, 1, 6), (1, 1, 0, 1), (1, 0, 1, 1), (6, 1, 6, 0), (1, 6, 0, 1), (1, 5, 1, 6), (0, 1, 6, 6), (1, 2, 0, 1), (1, 1, 6, 0), (2, 1, 1, 1), (6, 0, 1, 6), (5, 1, 6, 0), (0, 6, 1, 5), (1, 6, 6, 2), (2, 4, 1, 6), (1, 1, 1, 2), (0, 1, 6, 5), (1, 3, 0, 1), (1, 0, 2, 1), (1, 1, 5, 6), (3, 2, 1, 1), (6, 1, 5, 1), (6, 0, 2, 6), (4, 1, 6, 0), (1, 5, 0, 1), (1, 4, 1, 5), (1, 5, 2, 4), (1, 6, 5, 3), (3, 3, 1, 6), (1, 2, 6, 6), (2, 3, 1, 2), (1, 2, 1, 3), (0, 1, 6, 4), (1, 4, 0, 1), (2, 1, 6, 0), (3, 1, 2, 1), (2, 1, 3, 2), (1, 1, 4, 5), (4, 3, 1, 1), (5, 1, 1, 6), (4, 2, 5, 1), (5, 1, 4, 1), (6, 0, 3, 6), (3, 1, 6, 0), (0, 6, 1, 4), (1, 5, 6, 3), (2, 2, 1, 5), (2, 4, 6, 2), (3, 2, 2, 4), (2, 4, 3, 3), (1, 6, 4, 4), (4, 2, 1, 6), (1, 1, 2, 3), (1, 2, 5, 4), (3, 5, 1, 2), (1, 3, 6, 5), (2, 5, 1, 3), (1, 3, 1, 4), (1, 0, 3, 1), (2, 1, 4, 6), (5, 2, 2, 1), (3, 2, 5, 6), (5, 3, 3, 2), (3, 2, 4, 3), (1, 1, 3, 4), (5, 4, 1, 1), (6, 1, 4, 2), (5, 1, 3, 5), (2, 3, 5, 1), (4, 1, 2, 6), (2, 2, 4, 1), (4, 1, 3, 1), (1, 4, 2, 2), (1, 5, 5, 5), (3, 0, 1, 5), (1, 5, 3, 2), (5, 6, 2, 4), (3, 3, 5, 3), (5, 0, 3, 3), (3, 3, 4, 2), (3, 4, 2, 3), (2, 3, 3, 5), (1, 2, 4, 2), (4, 0, 1, 2), (1, 2, 2, 5), (1, 3, 5, 2), (3, 1, 1, 3), (1, 4, 6, 4), (2, 0, 1, 4), (3, 1, 5, 2), (2, 1, 2, 5), (0, 3, 2, 1), (4, 3, 4, 5), (0, 5, 4, 3), (4, 2, 2, 3), (5, 1, 5, 4), (0, 4, 5, 1), (5, 1, 2, 2), (4, 1, 5, 5), (6, 3, 4, 1), (3, 1, 3, 6), (0, 2, 3, 1), (2, 2, 6, 3), (2, 2, 3, 0), (1, 5, 4, 0), (4, 5, 1, 5), (4, 0, 3, 2), (2, 4, 2, 1), (0, 3, 2, 4), (2, 4, 5, 0), (3, 3, 2, 0), (1, 3, 3, 3), (4, 2, 4, 4), (0, 5, 4, 2), (2, 3, 4, 3), (5, 0, 2, 3), (3, 5, 4, 0), (1, 2, 3, 0), (5, 2, 1, 2), (3, 0, 2, 5), (2, 5, 3, 1), (1, 3, 4, 6), (4, 4, 1, 3), (1, 3, 2, 0), (1, 4, 5, 0), (3, 4, 1, 4), (5, 2, 0, 3), (2, 1, 0, 4), (3, 2, 0, 5), (4, 3, 0, 2), (4, 1, 4, 3), (2, 3, 0, 4), (5, 1, 0, 3), (5, 5, 5, 1), (0, 3, 2, 2), (4, 1, 1, 4), (3, 4, 4, 1), (4, 1, 0, 2), (3, 1, 0, 5), (3, 3, 3, 1), (3, 0, 5, 5), (5, 2, 3, 0), (3, 2, 3, 0), (0, 2, 3, 2), (2, 4, 0, 4), (2, 0, 2, 4), (0, 4, 5, 0), (5, 0, 1, 3), (4, 6, 3, 3), (3, 3, 0, 5), (4, 2, 0, 2), (4, 0, 4, 2), (3, 4, 5, 0), (2, 3, 2, 0), (0, 3, 2, 3), (0, 5, 4, 0), (5, 5, 2, 5), (2, 0, 3, 4), (1, 4, 4, 3), (0, 3, 2, 5), (5, 5, 0, 3), (3, 0, 0, 5), (0, 5, 4, 1), (2, 0, 0, 4), (2, 5, 2, 2), (0, 2, 3, 3)]
            paths = [[], [1], [2], [3], [1, 2], [1, 3], [2, 1], [2, 3], [3, 1], [3, 3], [1, 2, 1], [1, 2, 3], [1, 3, 1], [1, 3, 3], [2, 1, 2], [2, 3, 1], [2, 3, 3], [3, 1, 2], [3, 3, 1], [3, 3, 3], [1, 2, 1, 2], [1, 2, 3, 1], [1, 2, 3, 3], [1, 3, 1, 2], [1, 3, 3, 1], [1, 3, 3, 3], [2, 1, 2, 1], [2, 1, 2, 3], [2, 3, 1, 2], [2, 3, 3, 1], [2, 3, 3, 3], [3, 1, 2, 1], [3, 1, 2, 3], [3, 3, 1, 2], [3, 3, 3, 1], [3, 3, 3, 3], [1, 2, 1, 2, 1], [1, 2, 1, 2, 3], [1, 2, 3, 1, 2], [1, 2, 3, 3, 1], [1, 2, 3, 3, 3], [1, 3, 1, 2, 1], [1, 3, 1, 2, 3], [1, 3, 3, 1, 2], [1, 3, 3, 3, 1], [1, 3, 3, 3, 3], [2, 1, 2, 1, 2], [2, 1, 2, 3, 1], [2, 1, 2, 3, 3], [2, 3, 1, 2, 1], [2, 3, 1, 2, 3], [2, 3, 3, 1, 2], [2, 3, 3, 3, 1], [2, 3, 3, 3, 3], [3, 1, 2, 1, 2], [3, 1, 2, 3, 1], [3, 1, 2, 3, 3], [3, 3, 1, 2, 1], [3, 3, 1, 2, 3], [3, 3, 3, 1, 2], [1, 2, 1, 2, 1, 2], [1, 2, 1, 2, 3, 1], [1, 2, 1, 2, 3, 3], [1, 2, 3, 1, 2, 1], [1, 2, 3, 1, 2, 3], [1, 2, 3, 3, 1, 2], [1, 2, 3, 3, 3, 1], [1, 2, 3, 3, 3, 3], [1, 3, 1, 2, 1, 2], [1, 3, 1, 2, 3, 1], [1, 3, 1, 2, 3, 3], [1, 3, 3, 1, 2, 1], [1, 3, 3, 1, 2, 3], [1, 3, 3, 3, 1, 2], [2, 1, 2, 3, 1, 2], [2, 1, 2, 3, 3, 1], [2, 1, 2, 3, 3, 3], [2, 3, 1, 2, 1, 2], [2, 3, 1, 2, 3, 3], [2, 3, 3, 1, 2, 1], [2, 3, 3, 1, 2, 3], [2, 3, 3, 3, 1, 2], [3, 1, 2, 1, 2, 3], [3, 1, 2, 3, 1, 2], [3, 1, 2, 3, 3, 1], [3, 1, 2, 3, 3, 3], [3, 3, 1, 2, 1, 2], [3, 3, 1, 2, 3, 1], [3, 3, 1, 2, 3, 3], [3, 3, 3, 1, 2, 1], [3, 3, 3, 1, 2, 3], [1, 2, 1, 2, 3, 1, 2], [1, 2, 1, 2, 3, 3, 1], [1, 2, 1, 2, 3, 3, 3], [1, 2, 3, 3, 1, 2, 1], [1, 2, 3, 3, 1, 2, 3], [1, 3, 1, 2, 3, 1, 2], [1, 3, 1, 2, 3, 3, 1], [1, 3, 1, 2, 3, 3, 3], [1, 3, 3, 1, 2, 1, 2], [1, 3, 3, 1, 2, 3, 1], [1, 3, 3, 1, 2, 3, 3], [1, 3, 3, 3, 1, 2, 1], [1, 3, 3, 3, 1, 2, 3], [2, 1, 2, 3, 1, 2, 1], [2, 1, 2, 3, 3, 1, 2], [2, 1, 2, 3, 3, 3, 1], [2, 1, 2, 3, 3, 3, 3], [2, 3, 1, 2, 1, 2, 3], [2, 3, 1, 2, 3, 3, 1], [2, 3, 1, 2, 3, 3, 3], [2, 3, 3, 1, 2, 1, 2], [2, 3, 3, 1, 2, 3, 1], [2, 3, 3, 1, 2, 3, 3], [2, 3, 3, 3, 1, 2, 1], [2, 3, 3, 3, 1, 2, 3], [3, 1, 2, 1, 2, 3, 1], [3, 1, 2, 1, 2, 3, 3], [3, 1, 2, 3, 3, 1, 2], [3, 1, 2, 3, 3, 3, 1], [3, 1, 2, 3, 3, 3, 3], [3, 3, 1, 2, 1, 2, 3], [3, 3, 1, 2, 3, 1, 2], [3, 3, 1, 2, 3, 3, 1], [3, 3, 1, 2, 3, 3, 3], [3, 3, 3, 1, 2, 1, 2], [3, 3, 3, 1, 2, 3, 1], [3, 3, 3, 1, 2, 3, 3], [1, 2, 1, 2, 3, 3, 1, 2], [1, 2, 1, 2, 3, 3, 3, 1], [1, 2, 3, 3, 1, 2, 1, 2], [1, 2, 3, 3, 1, 2, 3, 1], [1, 2, 3, 3, 1, 2, 3, 3], [1, 3, 1, 2, 3, 3, 1, 2], [1, 3, 1, 2, 3, 3, 3, 1], [1, 3, 1, 2, 3, 3, 3, 3], [1, 3, 3, 1, 2, 1, 2, 3], [1, 3, 3, 1, 2, 3, 3, 1], [1, 3, 3, 1, 2, 3, 3, 3], [1, 3, 3, 3, 1, 2, 1, 2], [1, 3, 3, 3, 1, 2, 3, 1], [1, 3, 3, 3, 1, 2, 3, 3], [2, 1, 2, 3, 3, 1, 2, 1], [2, 1, 2, 3, 3, 1, 2, 3], [2, 3, 1, 2, 1, 2, 3, 1], [2, 3, 1, 2, 1, 2, 3, 3], [2, 3, 1, 2, 3, 3, 3, 1], [2, 3, 1, 2, 3, 3, 3, 3], [2, 3, 3, 1, 2, 1, 2, 3], [2, 3, 3, 1, 2, 3, 1,2], [2, 3, 3, 1, 2, 3, 3, 3], [2, 3, 3, 3, 1, 2, 1, 2], [2, 3, 3, 3, 1, 2, 3, 1], [2, 3, 3, 3, 1, 2, 3, 3], [3, 1, 2, 1, 2, 3, 1, 2], [3, 1, 2, 1, 2, 3, 3, 1], [3, 1, 2, 1, 2, 3, 3, 3], [3, 1, 2, 3, 3, 1, 2, 3], [3, 3, 1, 2, 1, 2, 3, 3], [3, 3, 3, 1, 2, 3, 1, 2], [3, 3, 3, 1, 2, 3, 3, 1], [1, 2, 1, 2, 3, 3, 1, 2, 1], [1, 2, 1, 2, 3, 3, 1, 2, 3], [1, 2, 3, 3, 1, 2, 1, 2, 3], [1, 2, 3, 3, 1, 2, 3, 1, 2], [1, 3, 1, 2, 3, 3, 1, 2, 3], [1, 3, 3, 1, 2, 1, 2, 3, 3], [1, 3, 3, 3, 1, 2, 3, 1, 2]]

    return order, group, paths

def MultiplyMatrices(x, y, p):
    z0 = (x[0]*y[0] + x[1]*y[2]) % p
    z1 = (x[0]*y[1] + x[1]*y[3]) % p
    z2 = (x[2]*y[0] + x[3]*y[2]) % p
    z3 = (x[2]*y[1] + x[3]*y[3]) % p

    z = (z0, z1, z2, z3)
    return z

def IsSame(x, y, p):
    flag1 = True
    for i in range(4):
        if (x[i] != y[i]):
            flag1 = False
            break

    if (flag1): return True
    
    flag2 = True
    for i in range(4):
        if (x[i] != (-y[i] % p) ):
            flag2 = False
            break

    if (flag2): return True

    return False

def IsElementInArray(el, arr, listSize, p):
    for i in range(listSize):
        if (IsSame(el, arr[i], p)):
            return True
    return False

def CalculateGroup(p):
    g1 = (0, 1, p-1, 0)
    g2 = (0, p-1, 1, p-1)
    g3 = (1, 1, 0, 1)

    # Start from I then iterate through each element
    # by left multiplying by generators
    elements = [(1, 0, 0, 1)]
    paths = [[]]

    numElts = 1
    i = 0
    while (i < numElts):
        el = elements[i]

        new1 = MultiplyMatrices(g1, el, p)
        flag1 = IsElementInArray(new1, elements, numElts, p)
        if (not flag1):
            elements.append(new1)
            numElts += 1
            arr = [paths[i][j] for j in range(len(paths[i]))]
            arr.append(1)
            paths.append(arr)

        new2 = MultiplyMatrices(g2, el, p)
        flag2 = IsElementInArray(new2, elements, numElts, p)
        if (not flag2):
            elements.append(new2)
            numElts += 1
            arr = [paths[i][j] for j in range(len(paths[i]))]
            arr.append(2)
            paths.append(arr)

        new3 = MultiplyMatrices(g3, el, p)
        flag3 = IsElementInArray(new3, elements, numElts, p)
        if (not flag3):
            elements.append(new3)
            numElts += 1
            arr = [paths[i][j] for j in range(len(paths[i]))]
            arr.append(3)
            paths.append(arr)
        
        i += 1

    return  numElts, elements, paths

def FindElementPath(el, order, group, paths, p):
    for i in range(order):
        flag = IsSame(el, group[i], p)
        if (flag): return paths[i]
    
    return []

def FindPathElement(path, p):
    g1 = (0, 1, p-1, 0)
    g2 = (0, p-1, 1, p-1)
    g3 = (1, 1, 0, 1)

    el = (1, 0, 0, 1)
    for i in range(len(path)):
        match path[i]:
            case 1: el = MultiplyMatrices(g1, el, p)
            case 2: el = MultiplyMatrices(g2, el, p)
            case 3: el = MultiplyMatrices(g3, el, p)

    return el

def DrawElementTriangle(el, order, group, paths, p):
    path = FindElementPath(el, order, group, paths, p)
    x, y, a, b, r = ti.ComputeInitialTriangle(p)
    ti.DrawElement(x, y, p, a, b, r, path, False)

def DrawWholeGroup(order, group, paths, p, drawOriginVertex):
    x, y, a, b, r = ti.ComputeInitialTriangle(p)
    l = len(x)

    fig = plt.figure()
    ax = fig.add_subplot(aspect = 'equal')

    # Guidelines
    plt.plot([-100, 100], [0, 0], color = "green")
    plt.plot([-a*100, a*100], [-b*100, b*100], color = "orange")
    circle = plt.Circle((a, b), r, edgecolor = 'red', facecolor = "none")
    ax.add_patch(circle)

    tD = 0

    for i in range(order):
        m = len(paths[i])
        if (m == 0):
            plt.plot(x, y, color = "black")
            ax.fill(x, y)
            if (drawOriginVertex):
                    plt.plot(0, 0, marker="o", markersize = 5, markerfacecolor = "white", markeredgecolor = "black")
            tD += 1


        pX = [x[i] for i in range(l)]
        pY = [y[i] for i in range(l)] 

        for j in range(m):
            move = paths[i][j]
            k = 0
            while k < l:
                match move:
                    case 1: pX[k], pY[k] = ti.S1(a, b, r, p, pX[k], pY[k])
                    case 2: pX[k], pY[k] = ti.S2(a, b, r, p, pX[k], pY[k])
                    case 3: pX[k], pY[k] = ti.S3(a, b, r, p, pX[k], pY[k])

                k += 1

            if (j == m-1):
                plt.plot(pX, pY, color = "black")
                ax.fill(pX, pY)
                tD += 1

                if (drawOriginVertex):
                    plt.plot(pX[0], pY[0], marker="o", markersize = 5, markerfacecolor = "white", markeredgecolor = "black")

    ax.set_xlim((-4, 4))
    ax.set_ylim((-4, 4))

    if (p == 7):
        ax.set_xlim((-1, 1))
        ax.set_ylim((-1, 1))

    plt.show()

def CrudeKernel(p):
    order, group, paths = GetGroupData357(p)

    arr = [3, 1, 2, 3, 3, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2]
    el = FindPathElement(arr, p)
    otherPath = FindElementPath(el, order, group, paths, p)
    rev = [2, 2, 1, 3, 3, 3, 3, 3, 3, 2, 2, 1, 3, 3, 3, 3, 3, 2, 2, 1]
    revEl = FindPathElement(rev, p)
    
    identityPath = arr + rev
    print(identityPath)
    el2 = FindPathElement(identityPath, p)
    print(el2)
    x, y, a, b, r = ti.ComputeInitialTriangle(p)
    ti.DrawElement(x, y, p, a, b, r, identityPath, False)

def Main(p):
    order, group, paths = CalculateGroup(p)
    #x, y, a, b, r = ti.ComputeInitialTriangle(p)
    #ti.DrawElement(x, y, p, a, b, r, paths[18], False)
    DrawWholeGroup(order, group, paths, p, False)

Main(5)