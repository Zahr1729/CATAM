
text = """341 3
645 7
1387 3
1905 7
2047 3
2701 5
3277 3
4033 3
4369 3
4371 5
4681 3
5461 3
7957 3
8321 3
8481 5
10261 3
11305 3
12801 7
13741 3
13747 3
13981 3
14491 3
15709 3
16705 3
18705 7
18721 5
19951 3
23001 5
23377 3
25761 5
30121 3
30889 3
31417 3
31609 3
31621 5
33153 5
34945 3
35333 3
39865 3
41665 3
42799 3
49141 5
49981 3
55245 7
57421 3
60701 3
60787 3
65077 3
65281 3
68101 3
72885 7
74665 3
80581 3
83333 5
83665 7
85489 3
87249 5
88357 3
88561 5
90751 5
91001 3
93961 5
104653 5
107185 7
113201 3
121465 3
123251 3
129889 3
129921 5
130561 3
137149 3
149281 3
150851 3
154101 5
157641 5
158369 3
162193 3
164737 3
176149 5
181901 3
188057 3
194221 3
196021 3
196093 3
204001 5
206601 5
208465 3
212421 5
215265 7
215749 3
219781 3
220729 3
223345 3
226801 5
228241 5
233017 3
241001 3
249841 3
253241 3
256999 3
258511 3
264773 3
266305 3
271951 3
272251 3
275887 3
276013 5
280601 3
282133 5
284581 3
285541 3
289941 5
294271 3
318361 3
323713 3
332949 5
341497 3
348161 3
357761 3
367081 3
387731 3
390937 3
396271 3
401401 3
422659 3
423793 3
427233 5
435671 3
443719 3
448921 3
451905 7
452051 3
458989 3
464185 3
476971 3
481573 3
486737 3
489997 3
493697 3
493885 3
513629 3
514447 3
526593 5
534061 5
556169 3
563473 5
574561 5
574861 3
580337 3
582289 3
587861 3
588745 3
604117 3
611701 3
617093 3
622909 5
625921 3
635401 3
642001 3
647089 3
653333 5
657901 3
665281 5
665333 3
665401 3
672487 3
679729 3
680627 3
683761 3
688213 3
710533 3
711361 3
721801 11
722201 3
722261 3
729061 3
738541 3
741751 3
742813 3
743665 3
745889 3
757945 3
769567 3
769757 3
786961 5
800605 3
818201 3
831405 7
838861 3
841681 3
847261 3
852481 3
873181 7
875161 3
877099 3
898705 3
916327 3
934021 3
950797 3
976873 3
983401 3"""

text2 = """
561 5
1105 3
1729 11
1905 7
2047 3
2465 3
3277 3
4033 3
4681 3
6601 3
8321 3
8481 5
10585 7
12801 7
15841 13
16705 3
18705 7
25761 5
29341 5
30121 3
33153 5
34945 3
41041 17
42799 3
46657 5
49141 5
52633 5
62745 7
65281 3
74665 3
75361 7
80581 3
85489 3
87249 5
88357 3
90751 3
104653 3
113201 3
115921 7
126217 5
129921 5
130561 3
149281 3
158369 3
162401 3
164737 3
172081 11
188057 3
196093 3
208465 3
215265 7
220729 3
223345 3
233017 3
252601 3
253241 3
256999 3
266305 3
271951 3
278545 3
280601 3
294409 5
314821 5
323713 3
334153 5
340561 3
348161 3
357761 3
390937 3
399001 13
410041 3
427233 5
448921 3
449065 13
458989 3
476971 3
486737 3
488881 11
489997 3
493697 3
514447 3
526593 5
530881 11
552721 3
580337 3
588745 3
625921 3
635401 3
647089 3
656601 17
658801 3
665281 3
670033 5
683761 3
711361 3
721801 5
741751 3
745889 3
748657 5
800605 3
818201 3
825265 3
838201 29
838861 3
841681 3
852481 3
852841 3
873181 5
875161 3
877099 3
916327 3
976873 3
983401 3
997633 5
"""

twoPseudoPrimes = [341, 561, 645, 1105, 1387, 1729, 1905, 2047, 2465, 2701, 2821, 3277, 4033, 4369, 4371, 4681, 5461, 6601, 7957, 8321, 8481, 8911, 10261, 10585, 11305, 12801, 13741, 13747, 13981, 14491, 15709, 15841, 16705, 18705, 18721, 19951, 23001, 23377, 25761, 29341, 30121, 30889, 31417, 31609, 31621, 33153, 34945, 35333, 39865, 41041, 41665, 42799, 46657, 49141, 49981, 52633, 55245, 57421, 60701, 60787, 62745, 63973, 65077, 65281, 68101, 72885, 74665, 75361, 80581, 83333, 83665, 85489, 87249, 88357, 88561, 90751, 91001, 93961, 101101, 104653, 107185, 113201, 115921, 121465, 123251, 126217, 129889, 129921, 130561, 137149, 149281, 150851, 154101, 157641, 158369, 162193, 162401, 164737, 172081, 176149, 181901, 188057, 188461, 194221, 196021, 196093, 204001, 206601, 208465, 212421, 215265, 215749, 219781, 220729, 223345, 226801, 228241, 233017, 241001, 249841, 252601, 253241, 256999, 258511, 264773, 266305, 271951, 272251, 275887, 276013, 278545, 280601, 282133, 284581, 285541, 289941, 294271, 294409, 314821, 318361, 323713, 
332949, 334153, 340561, 341497, 348161, 357761, 367081, 387731, 390937, 396271, 399001, 401401, 410041, 422659, 423793, 427233, 435671, 443719, 448921, 449065, 451905, 452051, 458989, 464185, 476971, 481573, 486737, 488881, 489997, 493697, 493885, 512461, 513629, 514447, 526593, 530881, 534061, 552721, 556169, 563473, 574561, 574861, 580337, 582289, 587861, 588745, 604117, 611701, 617093, 622909, 625921, 635401, 642001, 647089, 653333, 656601, 657901, 658801, 665281, 665333, 665401, 670033, 672487, 679729, 680627, 683761, 688213, 710533, 711361, 721801, 722201, 722261, 729061, 738541, 741751, 742813, 743665, 745889, 748657, 757945, 769567, 769757, 786961, 800605, 818201, 825265, 831405, 838201, 838861, 841681, 847261, 852481, 852841, 873181, 875161, 877099, 898705, 915981, 916327, 934021, 950797, 976873, 983401, 997633]

absolutePseudoPrimes = [561, 1105, 1729, 2465, 2821, 6601, 8911, 10585, 15841, 29341, 41041, 46657, 52633, 62745, 63973, 75361, 101101, 115921, 126217, 162401, 172081, 188461, 252601, 278545, 294409, 314821, 334153, 340561, 399001, 410041, 449065, 488881, 512461, 530881, 552721, 656601, 658801, 670033, 748657, 825265, 838201, 852841, 997633]


def GetBaseBreakData(input):
    data = input.split()
    betterData = []
    k = int(len(data)/2)
    for i in range(k):
        betterData.append([data[2*i], data[2*i + 1]])

    print(betterData)
    for i in range(31):
        print("],\n$" + str(i) + "$, [ ", end="")
        for j in range(k):
            if (betterData[j][1] == str(i)):
                print("$" + betterData[j][0] + "$ ", end="")


def Get2AndAbsPseudoprimes():
    print("[", end=" ")
    for i in range(len(twoPseudoPrimes)):
        print("$" + str(twoPseudoPrimes[i])+ "$", end=" ")
    print("],")

    print("[", end=" ")
    for i in range(len(absolutePseudoPrimes)):
        print("$" + str(absolutePseudoPrimes[i])+ "$", end=" ")
    print("],")


# Turn precomputed data into legible text for Q3
#GetBaseBreakData(text1)
#Get2AndAbsPseudoprimes()

# Turn precomputed data into legible text for Q4
GetBaseBreakData(text2)
    